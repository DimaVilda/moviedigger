openapi: 3.0.3
info:
  version: 1.0.0
  title: Client API to authorize user
  description: This service is a test task for Backbase team and it's role is to serve users to interact with movies
paths:
  /client-api/v1/users:
    post:
      tags:
        - userClient
      summary: Create a new user
      description: Create a new user with a provided username and password
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInformationRequestBody'
            example:
              username: dima
              password: password123
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              example: {}
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/Error'
  /client-api/v1/users/{userName}:
    delete:
      tags:
        - userClient
      summary: Delete a user
      description: Delete a user by his username
      operationId: deleteUser
      parameters:
        - in: path
          name: userName
          required: true
          schema:
            type: string
          description: Username of the user to be deleted
      responses:
        '200':
          description: User deleted successfully
          content:
            text/plain:
              schema:
                type: string
              example: Dima
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/Error'

  /client-api/v1/users/login:
    post:
      tags:
        - userClient
      summary: Start a game
      description: Log in a user using creds (userName and password) in application and allow accessing to use application APIs
      operationId: userLogin
      requestBody:
        description: Logged in user creds (userName and password)
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInformationRequestBody'
            example:
              userName: Dima
              password: dima123
      responses:
        '201':
          description: User was successfully logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoggedInUserResponse"
        '401':
          description: Failed login.
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/Error'
        '409':
          description: Login request conflict for already logged in user
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/Error'
        '404':
          description: A user was not found
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/Error'

  /client-api/v1/users/login/endsession:
    get:
      tags:
        - userClient
      summary: End user's active session
      description: Log out the user by revoking his tokens
      operationId: endSession
      responses:
        "200":
          description: Users session wa successfully completed
          content:
            application/json:
              example: {}
        '401':
          description: Unauthorized or invalid token.
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/Error'
        '409':
          description: User's session state is still open after logging out
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/Error'
  /client-api/v1/users/token:
    post:
      tags:
        - userClient
      summary: Retrieve user access token
      description: Retrieve a new access token from keycloak when the old one is expired by refresh token
      operationId: getAccessToken
      requestBody:
        description: Logged in user creds (userName and password)
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessTokenRequestBody'
            example:
              refreshToken: token123
      responses:
        '200':
          description: New access token successfully retrieved from keycloak
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessTokenResponse"
        '401':
          description: User is not logged in
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/Error'
        '404':
          description: A user was not found
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/Error'

components:
  schemas:
    UserInformationRequestBody:
      type: object
      description: Request body to login a new user by providing its name and password
      required:
        - userName
        - password
      properties:
        userName:
          description: Logged in user name
          maxLength: 36
          minLength: 1
          type: string
        password:
          description: Logged in user password
          maxLength: 36
          minLength: 1
          type: string
    AccessTokenRequestBody:
      type: object
      description: User's refresh token value
      required:
        - refreshToken
        - previousAccessToken
      properties:
        refreshToken:
          description: Logged in user's refresh token value
          type: string
        previousAccessToken:
          description: Previous access token to revoke it
          type: string
    LoggedInUserResponse:
      type: object
      description: Logged in user successful response with access-token, its expiration and refresh token expiration dates from keycloak
      required:
        - accessToken
        - expiresIn
        - refreshToken
        - refreshExpiresIn
      properties:
        accessToken:
          type: string
        expiresIn:
          type: integer
          format: int32
        refreshToken:
          type: string
        refreshExpiresIn:
          type: integer
          format: int32
    AccessTokenResponse:
      type: object
      description: Logged in user's new access token and expiration in seconds provided by keycloak by refresh token
      required:
        - accessToken
        - expiresIn
      properties:
        accessToken:
          type: string
        expiresIn:
          type: integer
          format: int32
    LoggedOutUserResponse:
      type: object
      description: Logged out user response with user name and user state
      properties:
        userName:
          type: string
          example: Dima
        userStatus:
          $ref: '#/components/schemas/UserLoginStatesEnum'
      required:
        - userName
        - userState
    UserLoginStatesEnum:
      type: string
      description: Current user login states
      default: LOGGED_OUT
      enum:
        - LOGGED_OUT
        - LOGGED_IN